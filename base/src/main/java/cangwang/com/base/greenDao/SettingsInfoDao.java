package cangwang.com.base.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETTINGS_INFO".
*/
public class SettingsInfoDao extends AbstractDao<SettingsInfo, Long> {

    public static final String TABLENAME = "SETTINGS_INFO";

    /**
     * Properties of entity SettingsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Width = new Property(1, int.class, "width", false, "SETTING_WIDTH");
        public final static Property Height = new Property(2, int.class, "height", false, "SETTING_HEIGHT");
        public final static Property Density = new Property(3, int.class, "density", false, "SETTING_DENISITY");
        public final static Property RecordPath = new Property(4, String.class, "recordPath", false, "SETTING_RECORDPATH");
    }


    public SettingsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SettingsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETTINGS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SETTING_WIDTH\" INTEGER NOT NULL ," + // 1: width
                "\"SETTING_HEIGHT\" INTEGER NOT NULL ," + // 2: height
                "\"SETTING_DENISITY\" INTEGER NOT NULL ," + // 3: density
                "\"SETTING_RECORDPATH\" TEXT);"); // 4: recordPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTINGS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SettingsInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWidth());
        stmt.bindLong(3, entity.getHeight());
        stmt.bindLong(4, entity.getDensity());
 
        String recordPath = entity.getRecordPath();
        if (recordPath != null) {
            stmt.bindString(5, recordPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SettingsInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWidth());
        stmt.bindLong(3, entity.getHeight());
        stmt.bindLong(4, entity.getDensity());
 
        String recordPath = entity.getRecordPath();
        if (recordPath != null) {
            stmt.bindString(5, recordPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SettingsInfo readEntity(Cursor cursor, int offset) {
        SettingsInfo entity = new SettingsInfo( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // width
            cursor.getInt(offset + 2), // height
            cursor.getInt(offset + 3), // density
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // recordPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SettingsInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setWidth(cursor.getInt(offset + 1));
        entity.setHeight(cursor.getInt(offset + 2));
        entity.setDensity(cursor.getInt(offset + 3));
        entity.setRecordPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SettingsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SettingsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SettingsInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
